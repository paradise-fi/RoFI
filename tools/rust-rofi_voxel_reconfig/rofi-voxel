#!/usr/bin/env python3

import argparse
import logging
import os
import subprocess
import sys
import tempfile
from typing import List, Optional


def get_logging_level(verbosity: int):
    assert verbosity >= 0
    if verbosity == 0:
        return logging.ERROR
    if verbosity == 1:
        return logging.WARNING
    if verbosity == 2:
        return logging.INFO
    return logging.DEBUG


def setup_logging(verbosity: int, logfile: Optional[str]):  # TODO args
    log_formatter = logging.Formatter('{asctime} [{levelname}] {message}',
                                      style='{')
    log_formatter.datefmt = '%H:%M:%S'

    logger = logging.getLogger()
    logger.setLevel(get_logging_level(verbosity))

    if logfile is not None:
        file_handler = logging.FileHandler(logfile, encoding='utf-8')
        # file_handler.setLevel(get_logging_level(verbosity))
        file_handler.setFormatter(log_formatter)
        logger.addHandler(file_handler)

        stderr_handler = logging.StreamHandler(sys.stderr)
        stderr_handler.setLevel(logging.ERROR)
        stderr_handler.setFormatter(log_formatter)
        logger.addHandler(stderr_handler)
    else:
        stderr_handler = logging.StreamHandler(sys.stderr)
        # stderr_handler.setLevel(get_logging_level(verbosity))
        stderr_handler.setFormatter(log_formatter)
        logger.addHandler(stderr_handler)


def convert(input_world_file: str, output_world_file: str, input_format: str, output_format: str):
    try:
        cmd = ['rofi-convert', input_world_file, output_world_file,
               '--input-format', input_format,
               '--output-format', output_format,
               ]
        logging.debug(f'Running cmd: {subprocess.list2cmdline(cmd)}')
        subprocess.check_call(cmd, stdout=sys.stderr)
    except subprocess.CalledProcessError as _:
        logging.fatal(
            f"Error while converting '{input_world_file}' (format: {input_format}) to '{output_world_file}' (format: {output_format})")
        exit(1)


def voxel_reconfig(init_voxel_file: str, goal_voxel_file: str, verbosity: int, logfile: Optional[str]):
    try:
        logging.info('Starting voxel reconfiguration')

        cmd = ['rofi-voxel_reconfig', init_voxel_file, goal_voxel_file]
        if verbosity > 0:
            cmd.append(f"-{'v' * verbosity}")
        if logfile is not None:
            cmd.extend(['--log', logfile])

        logging.debug(f'Running cmd: {subprocess.list2cmdline(cmd)}')
        subprocess.check_call(cmd)

        logging.info('Ended voxel reconfiguration')
    except subprocess.CalledProcessError as _:
        logging.fatal('Error while running voxel reconfig')
        exit(1)


def convert_and_reconfig(init_world_file: str, goal_world_file: str, init_format: str, goal_format: str, verbosity: int, logfile: Optional[str]):
    assert init_world_file != '-' or goal_world_file != '-'

    with tempfile.TemporaryDirectory() as tmp_dir:
        if init_format == 'voxel':
            init_voxel_file = init_world_file
        else:
            init_voxel_file = tempfile.NamedTemporaryFile(suffix='.json',
                                                          dir=tmp_dir).name
            convert(init_world_file, init_voxel_file,
                    input_format=init_format, output_format='voxel')

        if goal_format == 'voxel':
            goal_voxel_file = goal_world_file
        else:
            goal_voxel_file = tempfile.NamedTemporaryFile(suffix='.json',
                                                          dir=tmp_dir).name
            convert(goal_world_file, goal_voxel_file,
                    input_format=goal_format, output_format='voxel')

        voxel_reconfig(init_voxel_file, goal_voxel_file,
                       verbosity=verbosity, logfile=logfile)


def check_input_files(parser: argparse.ArgumentParser, files: List[str]):
    if files.count('-') > 1:
        parser.error("multiple input file arguments have value '-' (stdin)")

    for file in files:
        if file == '-':
            return
        if not os.path.exists(file):
            parser.error(f"can't open '{file}': No such file or directory")
        if not os.path.isfile(file):
            parser.error(f"can't open '{file}': Is a directory")
        if not os.access(file, os.R_OK):
            parser.error(f"can't open '{file}': Is not readable")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Run voxel reconfig. Returns the reconfig sequence in voxel format to stdout.')
    parser.add_argument('init_world_file', type=str,
                        help="Path to the init world file ('-' for stdin)")
    parser.add_argument('goal_world_file', type=str,
                        help="Path to the goal world file ('-' for stdin)")

    parser.add_argument('--format', '-f', type=str, default='json',
                        choices=['json', 'voxel', 'old'],
                        help='Format of world files (default: %(default)s)')
    parser.add_argument('--init-format', '--if', type=str,
                        choices=['json', 'voxel', 'old'],
                        help='Format of the init world file (overrides --format)')
    parser.add_argument('--goal-format', '--gf', type=str,
                        choices=['json', 'voxel', 'old'],
                        help='Format of the goal world file (overrides --format)')

    parser.add_argument('--verbose', '-v', action='count', default=0,
                        help='Increase verbosity level')
    parser.add_argument('--log', '-l', type=str,
                        help='Log file')

    args = parser.parse_args()
    check_input_files(parser, [args.init_world_file, args.goal_world_file])
    setup_logging(verbosity=args.verbose, logfile=args.log)

    convert_and_reconfig(args.init_world_file, args.goal_world_file,
                         args.format if args.init_format is None else args.init_format,
                         args.format if args.goal_format is None else args.goal_format,
                         verbosity=args.verbose, logfile=args.log)
