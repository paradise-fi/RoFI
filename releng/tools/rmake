#!/usr/bin/env python3

import os
import sys
import subprocess
import multiprocessing
from common import *

usage="""Usage:
    rmake --all                Compile all configured suites
    rmake --list               Show available compilation targets
    rmake --doc                Build & serve documentation (rebuilds on every change)
    rmake --help               Print this help
    rmake <targetName>...      Compile one or multiple targets
    rmake <pathPrefix>...      Compile one or multiple targets in path
    rmake <suitename>...       Compile given suite
    rmake clean                Clean all suite builds
    rmake clean-<suitename>... Clean given suite
"""

def compileTarget(target):
    print(f"Compiling target: {target}")
    try:
        subprocess.check_call(["make", f"-j{multiprocessing.cpu_count()}", target.target],
            cwd=os.path.join(buildDir, target.suite))
    except subprocess.SubprocessError as e:
        sys.exit(f"Build of target {target} failed. See output above\n")

def compileSuite(suite):
    print(f"Compiling suite {suite}")
    try:
        subprocess.check_call(["make", f"-j{multiprocessing.cpu_count()}"],
            cwd=os.path.join(buildDir, suite))
    except subprocess.SubprocessError as e:
        sys.exit(f"Build of suite {suite} failed. See output above\n")

def cleanSuite(suite):
    print(f"Cleaning suite {suite}")
    try:
        subprocess.check_call(["make", "clean"],
            cwd=os.path.join(buildDir, suite))
    except subprocess.SubprocessError as e:
        sys.exit(f"Cleaning of suite {suite} failed. See output above\n")

def printTargets():
    aSuites = availableSuites()
    aTargets = availableTargets()
    print("Available suites: " + ", ".join(aSuites) + "\n")
    for suite in aSuites:
        print(f"Available targets for suite {suite}:")
        empty = True
        for target in aTargets:
            if target.suite != suite:
                continue
            empty = False
            print(f"  {target.target}: {target.path}")
        if empty:
            print("  None")
        print("")

def checkIfTargets(args):
    for a in args:
        if a.startswith("--"):
            return False
    return True

if len(sys.argv) < 2:
    sys.exit("Invalid usage!\n\n" + usage)

command = sys.argv[1]

if command == "--list":
    if len(sys.argv) != 2:
        sys.exit("Invalid usage!\n\n" + usage)
    printTargets()
    sys.exit(0)

if command == "--all":
    if len(sys.argv) != 2:
        sys.exit("Invalid usage!\n\n" + usage)
    for suite in configuredSuites():
        if os.path.exists(os.path.join(buildDir, suite)):
            compileSuite(suite)
    sys.exit(0)

if command == "--doc":
    if len(sys.argv) != 2:
        sys.exit("Invalid usage!\n\n" + usage)
    try:
        tool = os.path.join(root, "releng", "tools", "_build_doc.sh")
        subprocess.check_call([tool])
        sys.exit(0)
    except subprocess.SubprocessError as e:
        sys.exit(1)
    except KeyboardInterrupt:
        sys.exit(0)

if command == "--help":
    if len(sys.argv) != 2:
        sys.exit("Invalid usage!\n" + usage)
    print(usage)
    sys.exit(0)

if not checkIfTargets(sys.argv[1:]):
    sys.exit("Invalid usage!\n" + usage)

aSuites = configuredSuites()
aTargets = availableTargets()

suitesToCompile = set()
targetsToCompile = set()
suitesToClean = set()

for pattern in sys.argv[1:]:
    if pattern in aSuites:
        suitesToCompile.add(pattern)
        continue
    used = False
    for target in aTargets:
        if target.path.startswith(pattern) or target.target == pattern:
            targetsToCompile.add(target)
            used = True
    if pattern == "clean":
        suitesToClean.update(aSuites)
        used = True
    if pattern.startswith("clean-"):
        suitesToClean.add(pattern[6:])
        used = True
    if not used:
        sys.exit(f"Invalid target pattern specified: '{pattern}'")

targetsToCompile = list(targetsToCompile)
targetsToCompile.sort(key=lambda x: x.suite)

for s in suitesToClean:
    cleanSuite(s)

for s in suitesToCompile:
    compileSuite(s)

for t in targetsToCompile:
    compileTarget(t)

