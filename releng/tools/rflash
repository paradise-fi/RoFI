#!/usr/bin/env python3

from multiprocessing.sharedctypes import Value
import sys
import os
import subprocess
from common import *

def esp32GetTableFile(img):
    """
    Locate partition table for the image, if it doesn't exists, return the
    default one
    """
    candidate = os.path.splitext(img.path)[0] + ".table"
    if os.path.exists(candidate):
        return candidate
    return os.path.join(buildDir, img.suite, "partition_table", "partition-table.bin")

def esp32GetAppOffset(tablefile):
    import gen_esp32part
    """
    Read partition file, find the first app partition and return its offset
    """
    with open(tablefile, "rb") as f:
        content = f.read()
    table = gen_esp32part.PartitionTable.from_binary(content)
    for partition in table:
        if partition.type == gen_esp32part.APP_TYPE:
            return partition.offset
    raise RuntimeError(f"No APP partition found in {tablefile}")


def flashEsp32Image(img, extra):
    command = ["esptool.py"]
    # Adjust baudrate based on extra argument
    if "-b" not in extra and "--baud" not in extra:
        command += ["--baud", "921600"]
    else:
        try:
            i = extra.index("-b")
        except ValueError:
            i = extra.index("--baud")
        command += extra[i:i+2]
        del extra[i:i+2]
    command += [
        "--chip", "esp32",
        "--before=default_reset",
        "--after=hard_reset",
        "write_flash",
        "--flash_mode", "dio",
        "--flash_freq", "40m",
        "--flash_size", "detect"]
    command += extra

    pTable = esp32GetTableFile(img)
    appOffset = esp32GetAppOffset(pTable)
    command += [
        "0x8000", os.path.join(buildDir, img.suite, "partition_table", pTable),
        "0x1000", os.path.join(buildDir, img.suite, "bootloader", "bootloader.bin"),
        f"0x{appOffset:02x}", img.path]

    print(f"Flashing image {img.name} from {img.suite}: {img.path}")
    print(f"Using partition table: {pTable}, app offset: 0x{appOffset:02x}")
    print(command)
    retcode = subprocess.call(command)
    return retcode

def run():
    if len(sys.argv) < 2 or (len(sys.argv) >= 3 and sys.argv[2] != "--"):
        sys.exit(
            "Invalid usage!\n\n"
            "Invoke as rflash <name_of_image> -- <extra_flash_parameters>...\n"
        )
    extraArgs = sys.argv[3:]
    imgs = collectImages()
    try:
        img = imgs[sys.argv[1]]
    except KeyError:
        sys.exit(f"Unknown image {sys.argv[1]}")
    if img.suite == "rofiFirmware":
        retcode = flashEsp32Image(img, extraArgs)
        sys.exit(retcode)
    else:
        sys.exit(f"Unsupported platform {img[0]}")

if __name__ == "__main__":
    try:
        run()
    except KeyboardInterrupt:
        sys.exit("Interrupted.")
