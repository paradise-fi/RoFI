// clang-format off

// AUTOGENERATED FILE, DO NOT EDIT
// Generated by https://roboticsbrno.github.io/Esp32-RBGridUI-Designer/
// Layout: {"cols":12,"rows":18,"enableSplitting":true,"widgets":[{"uuid":26185,"type":"Text","state":{"id":"TextJoint0","x":8,"y":1.5,"w":3,"h":1.5,"tab":0,"css":{},"text":"Joint 0","fontSize":17,"color":"#000000","background":"","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":15887,"type":"Slider","state":{"id":"SliderJoint1","x":1,"y":3.5,"w":6,"h":1.5,"tab":0,"css":{},"color":"#00d5ff","fontSize":16,"min":-1.5,"max":1.5,"value":0,"precision":0.01,"showValue":true}},{"uuid":18498,"type":"Slider","state":{"id":"SliderJoint0","x":1,"y":1.5,"w":6,"h":1.5,"tab":0,"css":{},"color":"#001580","fontSize":16,"min":-1.5,"max":1.5,"value":0,"precision":0.01,"showValue":true}},{"uuid":61441,"type":"Text","state":{"id":"TextJoint1","x":8,"y":3.5,"w":3,"h":1.5,"tab":0,"css":{},"text":"Joint 1","fontSize":17,"color":"#000000","background":"","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":23673,"type":"Led","state":{"id":"LedActive","x":0,"y":0,"w":1,"h":1,"tab":0,"css":{},"color":"#ff0000","on":false}},{"uuid":11298,"type":"Text","state":{"id":"Text1","x":1,"y":0,"w":6.5,"h":1,"tab":0,"css":{},"text":"If blinking => communication works","fontSize":12,"color":"#000000","background":"","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":13930,"type":"Slider","state":{"id":"SliderJoint2","x":1,"y":5.5,"w":6,"h":1.5,"tab":0,"css":{},"color":"#7b9400","fontSize":16,"min":-1.5,"max":1.5,"value":0,"precision":0.01,"showValue":true}},{"uuid":10964,"type":"Text","state":{"id":"TextJoint2","x":8,"y":5.5,"w":3,"h":1.5,"tab":0,"css":{},"text":"Joint 2","fontSize":17,"color":"#000000","background":"","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":11763,"type":"Text","state":{"id":"TextId","x":7.5,"y":0,"w":4.5,"h":1,"tab":0,"css":{},"text":"","fontSize":21,"color":"#46c35f","background":"","align":"center","valign":"center","prefix":"RoFI ID: ","suffix":""}}]}

// Usage: include this file, where needed, and in *one* .cpp file,
// define also GRIDUI_LAYOUT_DEFINITION just before the layout like this:
//
//    #define GRIDUI_LAYOUT_DEFINITION
//    #include "layout.h"
//    using namespace gridui;
//
// The layout.h should also be the last included header. Then, in your code:
//
//    auto builder = Layout.begin();
//    builder.Button1.onPress([](Button&) { ... })
//    ...
//    builder.commit();

#pragma once

#include <esp_log.h>
#include "gridui.h"

namespace gridui {

#ifndef RB_GRIDUI_VERSION
#define RB_GRIDUI_VERSION 0x040000
#endif

static_assert(RB_GRIDUI_VERSION >= 0x040000,
    "Your RBGridUi library version is too low for this layout, please update to 040000.");

class _Layout;

namespace builder {
class _LayoutBuilder {
    friend class gridui::_Layout;

    _LayoutBuilder() :
        TextJoint0(
            UI.text(8, 1.5, 3, 1.5, 26185)
                .text("Joint 0")
                .fontSize(17)
        ),
        SliderJoint1(
            UI.slider(1, 3.5, 6, 1.5, 15887)
                .color("#00d5ff")
                .min(-1.5)
                .max(1.5)
                .precision(0.01)
        ),
        SliderJoint0(
            UI.slider(1, 1.5, 6, 1.5, 18498)
                .color("#001580")
                .min(-1.5)
                .max(1.5)
                .precision(0.01)
        ),
        TextJoint1(
            UI.text(8, 3.5, 3, 1.5, 61441)
                .text("Joint 1")
                .fontSize(17)
        ),
        LedActive(
            UI.led(0, 0, 1, 1, 23673)
                .color("#ff0000")
        ),
        Text1(
            UI.text(1, 0, 6.5, 1, 11298)
                .text("If blinking => communication works")
        ),
        SliderJoint2(
            UI.slider(1, 5.5, 6, 1.5, 13930)
                .color("#7b9400")
                .min(-1.5)
                .max(1.5)
                .precision(0.01)
        ),
        TextJoint2(
            UI.text(8, 5.5, 3, 1.5, 10964)
                .text("Joint 2")
                .fontSize(17)
        ),
        TextId(
            UI.text(7.5, 0, 4.5, 1, 11763)
                .text("")
                .fontSize(21)
                .color("#46c35f")
                .prefix("RoFI ID: ")
        )
    {
    }

public:
    void commit();

    Text& TextJoint0;
    Slider& SliderJoint1;
    Slider& SliderJoint0;
    Text& TextJoint1;
    Led& LedActive;
    Text& Text1;
    Slider& SliderJoint2;
    Text& TextJoint2;
    Text& TextId;
};

}; // namespace builder

class _Layout {
    friend class builder::_LayoutBuilder;
public:
    _Layout() {}

    builder::_LayoutBuilder begin() {
        static bool called = false;
        if(called) {
            ESP_LOGE("GridUILayout", "Layout.begin() was called more than once, this is an error!");
        }
        called = true;
        return builder::_LayoutBuilder();
    }

    void changeTab (uint16_t index) {
        UI.changeTab(index);
    }

    Text TextJoint0;
    Slider SliderJoint1;
    Slider SliderJoint0;
    Text TextJoint1;
    Led LedActive;
    Text Text1;
    Slider SliderJoint2;
    Text TextJoint2;
    Text TextId;
};

extern _Layout Layout;
#ifdef GRIDUI_LAYOUT_DEFINITION
_Layout Layout;
#endif

namespace builder {

void _LayoutBuilder::commit() {
    Layout.TextJoint0 = TextJoint0.finish();
    Layout.SliderJoint1 = SliderJoint1.finish();
    Layout.SliderJoint0 = SliderJoint0.finish();
    Layout.TextJoint1 = TextJoint1.finish();
    Layout.LedActive = LedActive.finish();
    Layout.Text1 = Text1.finish();
    Layout.SliderJoint2 = SliderJoint2.finish();
    Layout.TextJoint2 = TextJoint2.finish();
    Layout.TextId = TextId.finish();
    UI.commit();
}

};

};